<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Media Stream to Server</title>
    <link href="https://vjs.zencdn.net/7.18.1/video-js.css" rel="stylesheet" />
</head>

<body>
    <h1>Media Stream to Server</h1>
    <video id="local-video" autoplay muted></video>
    <hr />
    <div>
        <p>Live controls</p>
        <select id="optCamera">
            <option value="">Select Camera</option>
        </select>
        <select id="optMic">
            <option value="">Select Micro</option>
        </select>
        <button id="btnDisableCamera">disable camera</button>
        <button id="btnEnableCamera">enable camera</button>
        <button id="btnMuteMic">mute</button>
        <button id="btnUnmuteMic">unmute</button>
        <button id="btnEnd">End</button>
    </div>

    <script src="https://vjs.zencdn.net/7.18.1/video.min.js"></script>
    <script>
        const currentUrl = new URLSearchParams(window.location.search);
        let socket;
        let stream;
        let mediaRecorder;
        let mediaVideoDevices = [];
        let mediaAudioDevices = [];

        // Step 1: Capture the Media Stream
        async function startStreaming() {
            try {
                // Capture media stream (e.g., webcam)
                stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                navigator.mediaDevices.enumerateDevices()
                    .then(devices => {
                        devices.forEach(device => {
                            console.log(`${device.kind}: ${device.label} (ID: ${device.deviceId})`);
                            if (device.kind === 'videoinput') {
                                mediaVideoDevices.push(device);
                            } else if (device.kind === 'audioinput') {
                                mediaAudioDevices.push(device);
                            }
                        });
                    })
                    .then(() => {
                        document.querySelector('#optCamera').innerHTML = mediaVideoDevices
                            .map(device => `<option value=${device.label}>${device.label}</option>`)
                            .join('');
                        document.querySelector('#optMic').innerHTML = mediaAudioDevices
                            .map(device => `<option value=${device.label}>${device.label}</option>`)
                            .join('');
                    })
                    .catch(err => {
                        console.error("Error accessing media devices:", err);
                    });

                // Display the local stream
                const videoElement = document.getElementById('local-video');
                videoElement.srcObject = stream;

                // Step 2: Send the Media Stream to the Server via WebSocket
                sendStreamToServer(stream);
            } catch (error) {
                console.error('Error accessing media devices:', error);
            }
        }

        // Set up WebSocket connection and send media data
        function sendStreamToServer(stream) {
            socket = new WebSocket('ws://localhost:3107');

            socket.onopen = () => {
                console.log('WebSocket connection opened');

                let roomId = currentUrl.get("roomId") || "default";
                socket.send(JSON.stringify({ topic: "start", data: roomId }));

                mediaRecorder = new MediaRecorder(stream);

                // Capture data chunks and send to the server
                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        socket.send(event.data); // Send binary data directly
                    }
                };

                mediaRecorder.start(5_000);
            };

            socket.onerror = (error) => {
                console.error('WebSocket error:', error);
            };

            socket.onclose = () => {
                console.log('WebSocket connection closed');
            };
        }

        // Start the streaming process when the page loads
        window.onload = startStreaming;

        // Lives controls
        document.querySelector("#btnEnd").addEventListener("click", function (event) {
            socket.close();
            stream.getTracks().forEach(track => track.stop());
            mediaRecorder.stop();
        });

        document.querySelector("#btnDisableCamera").addEventListener("click", function (event) {
            disableCamera();
        });

        document.querySelector("#btnEnableCamera").addEventListener("click", function (event) {
            enableCamera();
        });

        document.querySelector("#btnMuteMic").addEventListener("click", function (event) {
            muteAudio();
        });

        document.querySelector("#btnUnmuteMic").addEventListener("click", function (event) {
            unmuteAudio();
        });

        function disableCamera() {
            stream.getVideoTracks().forEach(track => track.enabled = false);
        }

        function enableCamera() {
            stream.getVideoTracks().forEach(track => track.enabled = true);
        }

        function muteAudio() {
            stream.getAudioTracks().forEach(track => track.enabled = false);
        }

        function unmuteAudio() {
            stream.getAudioTracks().forEach(track => track.enabled = true);
        }
    </script>
</body>

</html>