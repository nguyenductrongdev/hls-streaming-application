<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Media Stream to Server</title>
    <link href="https://vjs.zencdn.net/7.18.1/video-js.css" rel="stylesheet" />
</head>

<body>
    <video id="local-video" autoplay muted></video>

    <script src="https://vjs.zencdn.net/7.18.1/video.min.js"></script>
    <script>
        const currentUrl = new URLSearchParams(window.location.search);
        let socket;
        let stream;
        let mediaRecorder;
        let mediaConstraints = { video: true, audio: true };

        // Step 1: Capture the Media Stream
        async function startStreaming() {
            try {
                // Capture media stream (e.g., webcam)
                stream = await navigator.mediaDevices.getUserMedia(mediaConstraints);

                // Display the local stream
                const videoElement = document.getElementById('local-video');
                videoElement.srcObject = stream;

                // Step 2: Send the Media Stream to the Server via WebSocket
                sendStreamToServer(stream);
            } catch (error) {
                console.error('Error accessing media devices:', error);
            }
        }

        // Set up WebSocket connection and send media data
        function sendStreamToServer(stream) {
            socket = new WebSocket('ws://localhost:3107');

            socket.onopen = () => {
                console.log('WebSocket connection opened');

                let roomId = currentUrl.get("roomId") || "default";
                socket.send(JSON.stringify({ topic: "start", data: roomId }));

                mediaRecorder = new MediaRecorder(stream);

                // Capture data chunks and send to the server
                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        socket.send(event.data); // Send binary data directly
                    }
                };

                mediaRecorder.start(10_000);
            };

            socket.onerror = (error) => {
                console.error('WebSocket error:', error);
            };

            socket.onclose = () => {
                console.log('WebSocket connection closed');
            };
        }

        // Start the streaming process when the page loads
        window.onload = startStreaming;

        window.addEventListener('message', function (event) {
            console.log(event);

            let { name, payload } = event.data;
            switch (name) {
                case 'disableCamera':
                    disableCamera();
                    break;
                case 'enableCamera':
                    enableCamera();
                    break;
                case 'muteMic':
                    muteMic();
                    break;
                case 'unmuteMic':
                    unmuteMic();
                    break;
                case 'end':
                    endLive();
                    break;
                case 'switchCamera':
                    let { deviceLabel } = payload;
                    switchCamera(deviceLabel);
                    break;
                default:
                    console.warn('Unknown message');
                    break;
            }
        });


        function disableCamera() {
            stream.getVideoTracks().forEach(track => track.enabled = false);
        }

        function enableCamera() {
            stream.getVideoTracks().forEach(track => track.enabled = true);
        }

        function muteMic() {
            stream.getAudioTracks().forEach(track => track.enabled = false);
        }

        function unmuteMic() {
            stream.getAudioTracks().forEach(track => track.enabled = true);
        }

        async function switchCamera(deviceLabel) {
            let devices = await navigator.mediaDevices.enumerateDevices();
            mediaConstraints = {
                ...mediaConstraints,
                video: {
                    deviceId: devices.find(device => device.label === deviceLabel).deviceId,
                },
            };

            let newStream = await navigator.mediaDevices.getUserMedia(mediaConstraints);
            const oldVideoTrack = stream.getVideoTracks()[0];
            const newVideoTrack = newStream.getVideoTracks()[0];

            stream.removeTrack(oldVideoTrack);
            stream.addTrack(newVideoTrack);

            newStream.getTracks().forEach(track => {
                if (newVideoTrack.id !== track.id) track.stop();
            });
            oldVideoTrack.stop();
        }

        function endLive() {
            socket.close();
            stream.getTracks().forEach(track => track.stop());
            mediaRecorder.stop();
        }
    </script>
</body>

</html>